// <auto-generated />
using System;
using ConcertTickets.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConcertTickets.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250116213620_FixMigration")]
    partial class FixMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConcertTickets.Data.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Concerts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Artist = "Taylor Swift",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7873),
                            Date = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Koning Boudewijn Stadion, Brussel",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7874)
                        },
                        new
                        {
                            Id = 2,
                            Artist = "Taylor Swift",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7876),
                            Date = new DateTime(2025, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Koning Boudewijn Stadion, Brussel",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7877)
                        },
                        new
                        {
                            Id = 3,
                            Artist = "Charlie XCX",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7878),
                            Date = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Vorst Nationaal, Brussel",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7878)
                        },
                        new
                        {
                            Id = 4,
                            Artist = "Compact Disk Dummies",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7879),
                            Date = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Ancienne Belgique, Brussel",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7879)
                        },
                        new
                        {
                            Id = 5,
                            Artist = "Compact Disk Dummies",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7880),
                            Date = new DateTime(2025, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Ancienne Belgique, Brussel",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7881)
                        },
                        new
                        {
                            Id = 6,
                            Artist = "Coldplay",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7882),
                            Date = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Sport Paleis, Antwerpen",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7882)
                        },
                        new
                        {
                            Id = 7,
                            Artist = "Dua Lipa",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7883),
                            Date = new DateTime(2025, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Werchter",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7883)
                        },
                        new
                        {
                            Id = 8,
                            Artist = "Dua Lipa",
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7884),
                            Date = new DateTime(2025, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Werchter",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7885)
                        });
                });

            modelBuilder.Entity("ConcertTickets.Data.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MemberCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ConcertTickets.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DiscountApplied")
                        .HasColumnType("bit");

                    b.Property<int>("NumTickets")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("TicketOfferId")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TicketOfferId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ConcertTickets.Data.TicketOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumTickets")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("TicketType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.ToTable("TicketOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcertId = 1,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7994),
                            NumTickets = 10,
                            Price = 200.0,
                            TicketType = "Golden Circle",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7995)
                        },
                        new
                        {
                            Id = 2,
                            ConcertId = 1,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7996),
                            NumTickets = 50,
                            Price = 50.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7996)
                        },
                        new
                        {
                            Id = 3,
                            ConcertId = 1,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7997),
                            NumTickets = 60,
                            Price = 60.0,
                            TicketType = "Seated",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7998)
                        },
                        new
                        {
                            Id = 4,
                            ConcertId = 2,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7999),
                            NumTickets = 1000,
                            Price = 200.0,
                            TicketType = "Golden Circle",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(7999)
                        },
                        new
                        {
                            Id = 5,
                            ConcertId = 2,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8000),
                            NumTickets = 19000,
                            Price = 50.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8000)
                        },
                        new
                        {
                            Id = 6,
                            ConcertId = 2,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8001),
                            NumTickets = 20000,
                            Price = 60.0,
                            TicketType = "Seated",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8002)
                        },
                        new
                        {
                            Id = 7,
                            ConcertId = 3,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8003),
                            NumTickets = 0,
                            Price = 100.0,
                            TicketType = "Golden Circle",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8003)
                        },
                        new
                        {
                            Id = 8,
                            ConcertId = 3,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8004),
                            NumTickets = 0,
                            Price = 28.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8004)
                        },
                        new
                        {
                            Id = 9,
                            ConcertId = 3,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8005),
                            NumTickets = 0,
                            Price = 32.0,
                            TicketType = "Seated",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8006)
                        },
                        new
                        {
                            Id = 10,
                            ConcertId = 4,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8007),
                            NumTickets = 2000,
                            Price = 28.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8007)
                        },
                        new
                        {
                            Id = 11,
                            ConcertId = 4,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8008),
                            NumTickets = 1800,
                            Price = 32.0,
                            TicketType = "Seated",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8008)
                        },
                        new
                        {
                            Id = 12,
                            ConcertId = 5,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8009),
                            NumTickets = 2000,
                            Price = 28.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8010)
                        },
                        new
                        {
                            Id = 13,
                            ConcertId = 5,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8010),
                            NumTickets = 7800,
                            Price = 32.0,
                            TicketType = "Seated",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8011)
                        },
                        new
                        {
                            Id = 14,
                            ConcertId = 6,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8012),
                            NumTickets = 400,
                            Price = 150.0,
                            TicketType = "Golden Circle",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8012)
                        },
                        new
                        {
                            Id = 15,
                            ConcertId = 6,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8013),
                            NumTickets = 4000,
                            Price = 65.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8013)
                        },
                        new
                        {
                            Id = 16,
                            ConcertId = 6,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8014),
                            NumTickets = 4000,
                            Price = 55.0,
                            TicketType = "Seated",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8015)
                        },
                        new
                        {
                            Id = 17,
                            ConcertId = 7,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8016),
                            NumTickets = 1000,
                            Price = 124.0,
                            TicketType = "Golden Circle",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8016)
                        },
                        new
                        {
                            Id = 18,
                            ConcertId = 7,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8017),
                            NumTickets = 20000,
                            Price = 67.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8017)
                        },
                        new
                        {
                            Id = 19,
                            ConcertId = 8,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8018),
                            NumTickets = 2000,
                            Price = 36.0,
                            TicketType = "Standing",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8019)
                        },
                        new
                        {
                            Id = 20,
                            ConcertId = 8,
                            CreatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8019),
                            NumTickets = 7800,
                            Price = 40.0,
                            TicketType = "Seated",
                            UpdatedAt = new DateTime(2025, 1, 16, 21, 36, 19, 754, DateTimeKind.Utc).AddTicks(8020)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ConcertTickets.Data.Order", b =>
                {
                    b.HasOne("ConcertTickets.Data.TicketOffer", "TicketOffer")
                        .WithMany()
                        .HasForeignKey("TicketOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketOffer");
                });

            modelBuilder.Entity("ConcertTickets.Data.TicketOffer", b =>
                {
                    b.HasOne("ConcertTickets.Data.Concert", "Concert")
                        .WithMany("TicketOffers")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConcertTickets.Data.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConcertTickets.Data.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTickets.Data.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConcertTickets.Data.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcertTickets.Data.Concert", b =>
                {
                    b.Navigation("TicketOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
